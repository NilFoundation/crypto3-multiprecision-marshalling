name: Starter workflow for pull requests
# "Untrusted" means that it has access to secrets even in forks, changes should be made considering this

on:
  # TODO: change this to pull_request_target
  pull_request:
    types:
      - opened
      - synchronize

env:
  TEST_WORKFLOW_FILE: multi-platform-test.yml
  CI_CD_SHA: d46e791b1a06005f02313b5e5ab685463b35a8e3

jobs:
  upload-event-file:
    # This could be useful for actions inside dispatched workflows, making them feel like being triggered by pull_request event
    name: "Upload Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: pull_event_file
        path: ${{ github.event_path }}


  handle-syncwhith:
    name: "Handle SyncWith tag: link to issue, fetch SHAs, trigger related PRs"
    # This job runs only if the PR is not from a fork to prevent linking
    if: github.event.pull_request.head.repo.fork == false
    needs: upload-event-file
    runs-on: ubuntu-latest

    outputs:
      fetched-shas: ${{ steps.fetch-shas.outputs.fetched-shas }}

    steps:
    - name: Print the entire event payload
      run: cat $GITHUB_EVENT_PATH && echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Check if PR title contains SyncWith tag
      id: fetch-needed
      run: |
        count=$(echo "${{ github.event.pull_request.title }}" | grep -o '\[SyncWith' | wc -l)
        if [[ "$count" -eq 1 ]]; then
          echo "value=true" >> $GITHUB_OUTPUT
        elif [[ "$count" -gt 1 ]]; then
          echo "Error: Multiple 'SyncWith' tags detected in PR title." >&2
          exit 1
        else
          echo "value=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout ci_cd repository
      if: steps.fetch-needed.outputs.value == 'true'
      uses: actions/checkout@v4
      with:
        repository: x-mass/ci_cd
        ref: ${{ env.CI_CD_SHA }}
        path: .ci_cd

    - name: Set pip cache
      if: steps.fetch-needed.outputs.value == 'true'
      uses: actions/setup-python@v4
      with:
        # We do not specify version here, so preinstalled is always used.
        # python-version: '3.10'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      if: steps.fetch-needed.outputs.value == 'true'
      run: |
        pip install PyGithub

    - name: Generate CI/CD bot token
      id: generate-token
      if: steps.fetch-needed.outputs.value == 'true'
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.CICD_APP_ID }}
        private-key: ${{ secrets.CICD_APP_PRIVATE_KEY }}

    - name: Link PR to SyncWith issue
      if: steps.fetch-needed.outputs.value == 'true'
      working-directory: .ci_cd
      run: |
        python3 link_to_issue.py \
          ${{ github.repository }} \
          ${{ github.event.pull_request.number }}
      env:
        CI_TOKEN: ${{ steps.generate-token.outputs.token }}

    - name: Fetch PRs' SHAs for syncing
      id: fetch-shas
      if: steps.fetch-needed.outputs.value == 'true'
      working-directory: .ci_cd
      run: |
        fetched_shas="$(python3 find_commits_for_syncing.py \
          ${{ github.repository }} \
          ${{ github.event.pull_request.number }})"
        echo "fetched-shas=$fetched_shas" >> $GITHUB_OUTPUT
      env:
        # CI_TOKEN: ${{ steps.generate-token.outputs.token }}
        CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Trigger related PRs to rerun current test workflow with fetched SHAs
    #   if: steps.fetch-needed.outputs.value == 'true'
    #   working-directory: .ci_cd
    #   run: |
    #     echo "$json_data" | jq -r 'to_entries[] | "\(.key) \(.value.branch)"' | while read -r repo branch; do
    #       if [[ "$repo" == "${{ github.repository }}" ]]; then
    #         continue
    #       fi
    #       # escaped_json=$(echo "${{ steps.fetch-shas.outputs.fetched-shas }}" | sed 's/"/\\"/g')
    #       echo "Triggering ${{ env.TEST_WORKFLOW_FILE }} workflow for $repo (branch: $branch)"
    #       gh api repos/$repo/actions/workflows/${{ env.TEST_WORKFLOW_FILE }}/dispatches \
    #         -X POST \
    #         -F ref="$branch" \
    #         -F 'inputs[submodules_json]=${{ steps.fetch-shas.outputs.fetched-shas }}'
    #     done
    #   env:
    #     CI_TOKEN: ${{ steps.generate-token.outputs.token }}


  dispatch-test-workflow:
    name: Dispatch testing workflow
    needs:
      - handle-syncwhith
    runs-on: ubuntu-latest

    steps:
    - name: Dispatch
      run: |
        gh api repos/${{ github.repository }}/dispatches \
            -X POST \
            -F event_type="test_syncwith_pr" \
            -F 'client_payload[submodules_json]=${{ needs.handle-syncwhith.outputs.fetched-shas }}' \
            -F 'client_payload[ref]=refs/pull/${{ github.event.pull_request.number }}/merge'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Make extra check run
      run: |
        gh api repos/NilFoundation/crypto3-multiprecision-marshalling/check-runs \
          -X POST \
          -F name="example check run from pull workflow" \
          -F head_sha="${{ github.event.pull_request.head.sha }}" \
          -F status="completed" \
          -F conclusion="success" \
          -F completed_at="2023-10-26T13:13:13Z"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
