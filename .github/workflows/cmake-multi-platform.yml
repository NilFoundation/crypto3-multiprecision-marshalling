name: CMake build and test on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Currently the last version of Ubuntu at github runners
  UBUNTU_VERSION: '22.04'
  # Currently the last version of macOS at github runners
  MACOS_VERSION: '12'
  # The least version supported by both UBUNTU_VERSION and MACOS_VERSION
  BOOST_VERSION: '1.80.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations, each of them in both Release and Debug builds:
      # 1. <Linux, Release, latest G++ compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest Clang++ compiler toolchain on the default runner image, default generator>
      # 3. <MacOS, Release, latest G++ compiler toolchain on the default runner image, default generator>
      # 4. <MacOS, Release, latest Clang++ compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-${{ env.UBUNTU_VERSION }}, macos-${{ env.MACOS_VERSION }}]
        build_type: [Release, Debug]
        cpp_compiler: [g++, clang++]

    steps:
    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.4
      id: install-boost
      with:
          boost_version: ${{ env.BOOST_VERSION }}
          # Fail if no platform_version presented.
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          platform_version: ${{ (startsWith(matrix.os, 'macos-') && env.MACOS_VERSION) || (startsWith(matrix.os, 'ubuntu-') && env.UBUNTU_VERSION)}}

    - name: Checkout umbrella crypto3 repository
      uses: actions/checkout@v4
      with:
        repository: NilFoundation/crypto3
        submodules: 'true' # Using true fetches only the top-level submodules
        fetch-depth: 1 # Fetch only the latest commit on the triggered branch/ref

    - name: Determine submodule path
      id: get_submodule_path
      run: |
        # Extracting the repository name from GitHub context.
        REPO_NAME=${GITHUB_REPOSITORY##*/}
        # Parsing .gitmodules to find the path of the submodule repository.
        SUBMODULE_PATH=$(git config --file .gitmodules --get-regexp path | awk -v repo_name=$REPO_NAME '$0 ~ repo_name {print $2}')
        echo "submodule-path=$SUBMODULE_PATH" >> $GITHUB_OUTPUT

    - name: Checkout current repository into umbrella repository
      uses: actions/checkout@v4
      with:
        path: ${{ steps.get_submodule_path.outputs.submodule-path }}
        fetch-depth: 1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        UMBRELLA_BUILD_DIR=${{ github.workspace }}/build"
        SUBMODULE_BUILD_DIR=$UMBRELLA_BUILD_DIR/${{ steps.get_submodule_path.outputs.submodule-path }}"
        echo "umbrella-build-dir=$UMBRELLA_BUILD_DIR" >> "$GITHUB_OUTPUT"
        echo "submodule-build-dir=$SUBMODULE_BUILD_DIR" >> "$GITHUB_OUTPUT"
        echo "submodule-test-dir=$SUBMODULE_BUILD_DIR/test" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.umbrella-build-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DENABLE_JUNIT_TESTS_OUTPUT=TRUE
        -S ${{ github.workspace }}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build
      working-directory: ${{ steps.strings.outputs.submodule-build-dir }}
      run: make all

    - name: Test
      working-directory: ${{ steps.strings.outputs.submodule-test-dir }}
      run: ctest
